classdef HTMLDatabaseAnalysisWriter < HTMLDataTableWriter

    properties
        da
        useImageExtension = 'svg';
    end

    methods
        function html = HTMLDatabaseAnalysisWriter(varargin)
            html = html@HTMLDataTableWriter(varargin{:});
        end
        
        function buildValueStruct(html);
            html.valueStruct = html.table.getFullEntriesAsStringsAsStruct();

            fieldNames = fieldnames(html.valueStruct);
            [~, origIdx] = setdiff(fieldNames, {'figureInfo', 'output', 'exception'});
            fieldNames = makecol(fieldNames(sort(origIdx)));
            html.fields = [{'index'; 'figures'; 'output'}; fieldNames];
            html.valueStruct = assignIntoStructArray(html.valueStruct, 'index', ...
                arrayfun(@num2str, 1:length(html.valueStruct), ...
                'UniformOutput', false));
        end

        function str = getTooltipForField(html, field)
            if strcmp(field, 'success')
                str = 'Analysis ran successfuly on this entry?';
            elseif strcmp(field, 'figures')
                str = 'View figures generated by the analysis';
            else
                str = getTooltipForField@HTMLDataTableWriter(html, field);
            end
        end

        function buildColumnAttrMap(html)
            buildColumnAttrMap@HTMLDataTableWriter(html);
            html.columnAttrMap('success') = {'style', sprintf('background-color: %s;', ...
                html.indexColumnBackground)};
            html.columnAttrMap('figures') = {'style', sprintf('background-color: %s;', ...
                html.indexColumnBackground)};
            html.columnAttrMap('output') = {'style', sprintf('background-color: %s;', ...
                html.indexColumnBackground)};
        end

        function writeEntryRow(html, entry)
            fields = html.fields;

            index = str2num(entry.index);
            success = html.da.successByEntry(index);
            exception = html.da.exceptionByEntry{index};
            figureRowId = sprintf('figureRow%d', index);
            outputRowId = sprintf('outputRow%d', index);

            figureInfo = html.da.figureInfoByEntry{index};
            nFigures = length(figureInfo);

            % color row red if error
            if isfield(entry, 'success') && strcmp(entry.success, '0')
                html.openTableRow('class', 'error'); 
            else
                html.openTableRow();
            end

            for iField = 1:length(fields)
                field = fields{iField};

                % color table cells depending on the field type
                if html.columnAttrMap.isKey(field)
                    extras = html.columnAttrMap(field);
                    if ~iscell(extras)
                        extras = {extras};
                    end
                else
                    extras = {};
                end

                html.openTableCell(extras{:});
                if strcmp(field, 'success')
                    % entry.success will be '0' or '1' as it has been converted to string
                    if success
                        contents = '<span class="label">Success</span>';
                    else
                        contents = ['<span class="label label-important">Error</span>'];
                    end
                    html.writeTag('div', contents); 

                elseif strcmp(field, 'figures')
                    if nFigures > 0
                        % put button that toggles figureRow tr open and closed
                        html.openTag('div')
                        buttonText = sprintf('%d Figures', nFigures);
                        buttonClick = sprintf('$(''#%s'').toggle()', figureRowId);
                        html.writeTag('button', buttonText, 'type', 'button', ...
                            'class', 'btn btn-mini', 'data-toggle', 'button', ...
                            'onclick', buttonClick);
                        html.closeTag('div');
                    else
                        contents = '';
                        html.writeTag('div', contents, 'class', 'ellipsis'); 
                    end

                elseif strcmp(field, 'output')
                    dfd = html.table.fieldDescriptorMap(field);
                    html.openTag('div')
                    output = html.da.logByEntry{index};
                   
                    if isa(dfd, 'OutputField')
                        nLines = dfd.getLineCounts(output);
                    else
                        nLines = nnz(output == char(13) | output == char(10));
                    end

                    buttonText = sprintf('%d Lines', nLines);
                    buttonClick = sprintf('$(''#%s'').toggle()', outputRowId);
                    html.writeTag('button', buttonText, 'type', 'button', ...
                        'class', 'btn btn-mini', 'data-toggle', 'button', ...
                        'onclick', buttonClick);
                    html.closeTag('div');

                else
                    contents = ansiToHtml(entry.(field));
                    html.writeTag('div', contents, 'class', 'ellipsis'); 
                end
                html.closeTableCell();
            end

            html.closeTableRow();

            html.writeFigureCarouselRow(entry, figureRowId);
            html.writeOutputRow(entry, outputRowId);
        end

        function writeFigureCarouselRow(html, entry, figureRowId)
            index = str2num(entry.index);
            figureInfo = html.da.figureInfoByEntry{index};
            nFigures = length(figureInfo);
            
            % write tr full of figures
            if nFigures > 0
                figureCarouselId = sprintf('figureCarousel%d', index);
                html.openTableRow('class', 'figureRow', 'id', figureRowId);
                html.openTag('td', 'colspan', '100%', 'class', 'figures');

                %html.openTag('ul', 'class', 'thumbnails');
                %i
                
                html.openTag('div', 'id', figureCarouselId, 'class', 'figureCarousel carousel slide');
                html.openTag('div', 'class', 'carousel-inner figureCarouselInner' );


                for i = 1:nFigures
                    ext = html.useImageExtension;
                    info = figureInfo(i);
                    figFullFileName = [info.pathNoExt '.' ext];
                    figUrl = ['file://' figFullFileName];
                    figName = info.name;
                    figCaption = info.caption;
                    figWidth = info.width;
                    figHeight = info.height;
                    viewportWidth = 950;

                    if i == 1
                        html.openTag('div', 'class', 'active item');
                    else
                        html.openTag('div', 'class', 'item');
                    end
                    %html.openTag('li');
                    %html.openTag('div', 'class', 'thumbnail');

                    % centered container
                    html.openTag('div', 'class', 'figureWrapper', 'style', sprintf('width: %dpx;', viewportWidth));

                    if strcmp(ext, 'svg')
                        svgId = sprintf('figure%d-%d', index, i);
                        html.embedSVG('url', figUrl, 'viewportWidth', viewportWidth, 'width', figWidth, ...
                            'height', figHeight', 'alt', figName);
                    else
                        html.writeTag('img', '', 'src', figUrl, 'alt', figName); 
                    end

                    html.openTag('div', 'class', 'figureCaption', 'style', sprintf('width: %dpx;', figWidth));
                    html.writeTag('h3', figName);
                    html.writeTag('p', figCaption);

                    html.openTag('p');
                    %html.writeTag('span', '', 'class', 'icon-download');
                    for iExt = 1:length(info.extensions)
                        ext = info.extensions{iExt};
                        url = ['file://' info.pathNoExt '.' ext];
                        html.openTag('a', 'href', url, 'target', '_blank');
                        html.writeTag('small', ext);
                        html.closeTag('a');
                    end
                    html.closeTag('p');
                    html.closeTag('div');

                    html.closeTag('div');
                    html.closeTag('div');

                    %html.closeTag('div');
                    %html.closeTag('li');
                end
                html.closeTag('div');

                if nFigures > 1
                    html.writeTag('a', '&lsaquo;', 'class', 'carousel-control left', ...
                        'href', ['#' figureCarouselId], 'data-slide', 'prev');
                    html.writeTag('a', '&rsaquo;', 'class', 'carousel-control right', ...
                        'href', ['#' figureCarouselId], 'data-slide', 'next');
                end
                html.closeTag('div');

                %html.closeTag('ul');

                html.closeTableRow();
            end
        end

        function writeOutputRow(html, entry, outputRowId)
            index = str2num(entry.index);
            output = html.da.logByEntry{index};
            
            % write tr full of output text 
            html.openTableRow('class', 'outputRow', 'id', outputRowId);
            html.openTag('td', 'colspan', '100%', 'class', 'output');

            html.openTag('div', 'class', 'outputWrapper');

            % print an alert with either success or the exception details
            if strcmp(entry.success, '1')
                html.openTag('div', 'class', 'alert alert-success');
                html.writeTag('strong', 'Success!');
                html.fprintf(' Analysis %s ran successfully on this %s entry', ...
                    html.da.getName(), html.da.getMapsEntryName());
                html.closeTag('div');
            else
                exc = html.da.exceptionByEntry{index};
                func = exc.stack(1).name;
                line = exc.stack(1).line;
                msg = exc.message;
    
                html.openTag('div', 'class', 'alert alert-error');
                html.openTag('p');
                html.writeTag('strong', 'Error!');
                html.fprintf(' Analysis %s threw an exception:', html.da.getName());
                html.writeTag('p', sprintf('<tt>%s</tt> at line <tt>%d</tt>', ...
                     func, line));
                html.openTag('p');
                html.writeTag('tt', exc.message);
                html.closeTag('p');
                html.closeTag('div');
            end

            html.writeTag('pre', ansiToHtml(output), 'class', 'prettyprint linenums');
            html.closeTag('div');

            html.closeTag('td');
            html.closeTableRow();
        end

        function embedSVG(html, varargin)
            %html.writeTag('image', '', 'width', '100%', 'height', sprintf('%dpx', height), ...
            %    'src', url, 'alt', alt); 
            %html.writeTag('image', '', 'src', url, 'alt', alt); 
            %
            %html.writeTag('object', '', 'id', id, 'height', '400', 'type', 'image/svg+xml', 'data', url);  
            p = inputParser;
            p.addParamValue('viewportWidth', 950, @isnumeric)
            p.addParamValue('width', 500, @isnumeric);
            p.addParamValue('height', 400, @isnumeric);
            p.addParamValue('url', '', @ischar);
            p.addParamValue('alt', '', @ischar);
            p.parse(varargin{:});

            viewportWidth = p.Results.viewportWidth;
            width = p.Results.width;
            height = p.Results.height;

            imageX = num2str(round((viewportWidth - width) / 2));

            url = p.Results.url;
            alt = p.Results.alt;
            html.openTag('svg', 'alt', alt, 'width', num2str(viewportWidth), ...
                'height', num2str(height), ...
                'xmlns', 'http://www.w3.org/2000/svg', ...
                'xlink', 'http://www.w3.org/1999/xlink');
            html.openTag('g', 'id', 'viewport');
            html.writeTag('image', '', 'x', num2str(imageX), 'y', '0', ...
                'width', num2str(width), ...
                'height', num2str(height), 'xlink:href', url);
            html.closeTag('g');
            html.closeTag('svg');
        end

        function generate(html, da)
            html.da = da;
            html.table = da.resultTable;

            % generate report options
            name = da.getName();
            entryName = da.getMapsEntryName();
            html.pageTitle = name;
            html.mainHeader = html.table.entryNamePlural; 
            html.subHeader = sprintf('DatabaseAnalysis run on %s with %d entries.', ...
                entryName, html.table.nEntries);
            html.navTitle = 'Database Analysis';
            html.navSubTitle = name;

            html.openFile();
            html.writeHeader();

            html.writeDataTable();

            html.writeFooter();
            html.closeFile();
        end

    end
end

