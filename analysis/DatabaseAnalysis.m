classdef DatabaseAnalysis < handle & DataSource

    properties(SetAccess=protected)
        % time which the analysis started running
        timeRun

        % has this analysis run already?
        hasRun

        % the result table will be an instance of DatabaseAnalysisResultsTable 
        resultTable

        % will be populated post analysis. All of this info is in .resultTable as well
        successByEntry
        exceptionByEntry
        logByEntry

        % each element contains a struct with fields
        %   .pathNoExt
        %   .fileNameNoExt
        %   .extensions
        %   .name
        %   .caption
        %   .width
        %   .height
        figureInfoByEntry = {};
    end

    properties
        figureExtensions = {'png', 'eps', 'svg'};
    end
    
    properties(Access=protected)
        figureInfoCurrentEntry
        currentEntry
    end

    properties(Transient, SetAccess=protected)
        % reference to the current database when running
        database 
    end

    properties(Dependent)
        fieldsAnalysis 
        pathAnalysis 
        pathFigures
        htmlFile
    end

    methods(Abstract)
        % return a single word descriptor for this analysis, ignoring parameter
        % settings in param. The results will be stored as a DataTable with this
        % as the entryName
        name = getName(da);

        % return the param to be used when caching
        param = getCacheParam(da);
        
        % return the entryName corresponding to the table in the database which this
        % analysis runs on. The DataTable with this entry name will run this analysis
        % once on each entry and map the results via a 1-1 relationship 
        entryName = getMapsEntryName(da);
    
        % return a list of fields generated by the analysis. These need to be declared
        % ahead of time to simplify many of the caching related features.
        [fields fieldDescriptorMap] = getFieldsAnalysis(da);

        % run this analysis on one entry, entryTable will be a DataTable instance
        % filtered down to one entry
        resultStruct = runOnEntry(da, entry, fields)

    end

    methods % not necessary to override if the defaults are okay
        function tf = isequal(da, other)
            tf = true;
            if ~strcmp(class(da), class(other))
                tf = false;
                return;
            end
            if ~isequal(da.getCacheParam(), other.getCacheParam())
                tf = false;
                return;
            end
        end

        function tf = getRerunCachedUnsuccessful(da)
            tf = false;
        end

        % returns a list of entryNames that this analysis references
        % this is used when retrieving analysis results from the cache. If a related
        % table has changed, the analysis will be rerun on all entries.
        function list = getReferencesRelatedEntryNames(da)
            list = {};
        end

        % An analysis runs on each entry of a specific data table, and may reference
        % related tables through relationships in the database. When any of these
        % data tables is modified, this could invalidate the results of an analysis
        % for some or all of the entries. However, for caching to be at all useful
        % we simply issue a warning when using cached analysis results that references
        % a datatable that has changed. We assume that all changes have been additive
        % and do not affect the analysis that has already been run. Thus we only 
        % run the analysis on entries that are missing related rows in this analysis.
        % 
        % However, if this will yield incorrect results, you can specify that
        % when certain tables are changed at all, the entire cached analysis 
        % becomes invalid. Return a list of the .entryName of these tables here.
        function list = getEntryNamesChangesInvalidateCache(da)
            list = {};
        end
        
        % return a cell array of DataSource instances that must be loaded a priori,
        % These sources will ALWAYS be run, even when all analysis can be loaded 
        % from cache. If a source is needed only when doing new analysis, e.g.
        % another analysis this builds upon, include it in getRequiredSourcesForAnalysis
        % instead.
        function sources = getRequiredSources(da)
            sources = {};
        end

        % return a cell array of DataSource instances that must be loaded ONLY
        % when new analysis is to actually be run (not just loading from cache)
        function sources = getRequiredSourcesForAnalysis(da)
            sources = {};
        end
        
        % return a cell array of DatabaseView instances that must be applied before 
        % running this analysis
        function views = getRequiredViews(da)
            views = {};
        end
        
        % filter the data table as necessary before this analysis is run
        % table.entryName will match the result of getMapsEntryName() above
        % 
        % If the filtering pattern is a common one, consider turning it into a 
        % DatabaseView class and returning an instance from getDatabaseViewsToApply()
        function table = preFilterTable(da, table)
            % default does nothing
        end

        % return a list of additional meta fields that resultTable will contain
        % in addition to the analysis field and keyFields
        function [fields fieldDescriptorMap] = getFieldsAdditional(da, table)
            fieldDescriptorMap = ValueMap('KeyType', 'char', 'ValueType', 'any');
            fieldDescriptorMap('success') = BooleanField();
            fieldDescriptorMap('output') = OutputField();
            fieldDescriptorMap('runTimestamp') = DateTimeField();
            fieldDescriptorMap('exception') = UnspecifiedField();
            fieldDescriptorMap('figureInfo') = UnspecifiedField();
            fields = fieldDescriptorMap.keys;
        end
    end

    methods
        function checkHasRun(da)
            if ~da.hasRun
                error('Analysis has not yet been run. Please call .run(database) first.');
            end
        end

        function resultTable = run(da, db, varargin)
            p = inputParser();
            p.addRequired('db', @(db) isa(db, 'Database'));
            % optionally select subset of fields for analysis
            p.addParamValue('fields', da.fieldsAnalysis, @iscellstr); 
            % check the cache for existing analysis values
            p.addParamValue('loadCache', true, @islogical); 
            % save computed analysis values to the cache
            p.addParamValue('saveCache', true, @islogical); 
            % rerun any failed entries from prior runs, true value supersedes
            % .getRerunFailed() method return value, which is the class default
            p.addParamValue('rerunFailed', false, @islogical); 
            % don't run any new analysis, just load whatever possible from the cache
            p.addParamValue('loadCacheOnly', false, @islogical);
            % wrap the runOnEntry method in a try/catch block so that errors
            % on one entry don't halt the analysis
            p.addParamValue('catchErrors', true, @islogical);
            % generate a new report and figures folder even if no new analysis
            % was run, useful if issues encountered with report generation
            p.addParamValue('forceReport', false, @islogical);
            p.parse(db, varargin{:});

            fieldsAnalysis = p.Results.fields;
            loadCache = p.Results.loadCache;
            saveCache = p.Results.saveCache;
            rerunFailed = p.Results.rerunFailed;
            loadCacheOnly = p.Results.loadCacheOnly;
            catchErrors = p.Results.catchErrors;
            forceReport = p.Results.forceReport;

            % get analysis name
            name = da.getName();
            assert(isvarname(name), 'getName() must return a valid variable name');
            debug('Preparing for analysis : %s\n', name);

            da.database = db;

            % mark run timestamp consistently for all entries
            % we'll keep this timestamp unless we don't end up doing any new
            % analysis, then we'll just pick the most recent prior timestamp
            da.timeRun = now;
            fieldsAdditional = da.getFieldsAdditional();

            % keep track of whether we need to re-cache the result table 
            resultTableChanged = false;
            
            % load all data sources
            db.loadSource(da.getRequiredSources());
            
            % load all data views 
            db.applyView(da.getRequiredViews());

            % get the appropriate table to map
            entryName = da.getMapsEntryName();
            table = db.getTable(entryName);
            % enforce singular for 1:1 relationship to work
            entryName = table.entryName;

            % prefilter the table further if requested (database views also do this)
            table = da.preFilterTable(table);

            % build the resultTable as a LoadOnDemandTable
            % this will be a skeleton containing all of the fields for the analysis
            % none of which will be loaded initially
            resultTable = DatabaseAnalysisResultsTable(da);

            % now we ask resultTable load whatever it can from the cache
            if loadCache
                % load the table itself from cache and copy over additional field
                % values from the cache hit if present
                if resultTable.hasCache()
                    % LoadOnDemandMappedTable will automatically add all rows in
                    % resultTable that are missing in the cached copy (i.e. rows
                    % in the mapped table that were added after the cache was generated).
                    % 
                    % So we don't need to worry about adding these missing rows
                    resultTable = resultTable.loadFromCache();
                end

                % now we search for field values in fieldsAnalysis in the cache
                debug('Loading analysis field values from cache\n');
                % have the table load values from cache, but not call the loadValue
                % callback to request the field value as we'll run the actual
                % analysis below
                resultTable = resultTable.loadFields('loadCacheOnly', true);

                % get information about which field values were loaded from cache
                loadedByEntry = resultTable.loadedByEntry;
                cacheTimestamps = resultTable.cacheTimestampsByEntry;

                % check whether we should warn about modifications that could
                % theoretically affect the cached analysis but weren't explicitly
                % returned by getEntryNamesChangesInvalidateCache()
                references = makecol(da.getReferencesRelatedEntryNames());
                relevantTableList = [entryName; references];
                lastRelevantUpdate = db.getLastUpdated(relevantTableList);

                % calculate the oldest cache value loaded 
                fieldCacheOlderThanTableCount = 0;
                for iField = 1:length(fieldsAnalysis)
                    field = fieldsAnalysis{iField};
                    for iEntry = 1:resultTable.nEntries
                        if loadedByEntry(iEntry).(field)
                            timestamp = cacheTimestamps(iEntry).(field);
                            if timestamp < lastRelevantUpdate
                                fieldCacheOlderThanTableCount = fieldCacheOlderThanTableCount + 1;  
                            end
                        end
                    end
                end
                if fieldCacheOlderThanTableCount > 0 
                    debug('Warning: This DatabaseAnalysis has field values which were loaded from cache, but references tables modified after %d cached values were written. Use .deleteCache() to force a full re-run.\n', ...
                        fieldCacheOlderThanTableCount);
                end
            end

            resultTable = da.database.updateTable(resultTable);
            da.database.addRelationshipOneToOne(resultTable.entryName, entryName); 
            
            % NOTE: At this point you cannot assume that resultsTable and table (the mapped table)
            % are in the same order. They simply have the same number of rows mapped via
            % key field equivalence (1:1 relationship)

            % analyze entries that haven't been loaded from cache?
            if ~loadCacheOnly
                % figure out which entries have not yet been loaded
                loadedByEntry = resultTable.loadedByEntry;
                maskToAnalyze = true(resultTable.nEntries, 1);
                for iEntry = 1:resultTable.nEntries
                    allLoaded = true; 
                    for iField = 1:length(fieldsAnalysis)
                        field = fieldsAnalysis{iField};
                        if ~loadedByEntry(iEntry).(field)
                            allLoaded = false;
                            break;
                        end
                    end
                    maskToAnalyze(iEntry) = ~allLoaded;

                    % check whether this row has ever been run in the cache
                    % which is useful when the analysis does not use fields
                    if isempty(resultTable{iEntry}.runTimestamp)
                        maskToAnalyze(iEntry) = true;
                    end
                end

                debug('Analysis already loaded or cached for %d of %d entries\n', ...
                    nnz(~maskToAnalyze), resultTable.nEntries);
                        
                % do we re-run failed runs from last time
                if da.getRerunCachedUnsuccessful() || rerunFailed
                    maskFailed = makecol(~resultTable.success);
                    debug('Rerunning on %d entries which failed last time\n', nnz(maskFailed));
                    % also reanalyze any rows which were listed as unsuccessful
                    maskToAnalyze = maskToAnalyze | maskFailed;
                end
                
                nAnalyze = nnz(maskToAnalyze);
                if nAnalyze > 0
                    idxAnalyze = find(maskToAnalyze);

                    resultTableChanged = true;
                    
                    debug('Running analysis %s on %d of %d %s entries\n', name, ...
                        nAnalyze, table.nEntries, entryName);
                    
                    % load sources required ONLY for new analysis
                    da.database.loadSource(da.getRequiredSourcesForAnalysis());
                    
                    % actually run the analysis
                    for iAnalyze = 1:nAnalyze
                        iResult = idxAnalyze(iAnalyze);

                        % find the corresponding entry in the mapped table via the database
                        if maskToAnalyze(iResult)
                            entry = resultTable(iResult).matchRelated(entryName);
                            if entry.nEntries > 1
                                debug('WARNING: Multiple matches for analysis row, check uniqueness of keyField tuples in table %s. Choosing first.\n', entryName);
                                entry = entry.select(1);
                            elseif entry.nEntries == 0
                                % this likely indicates a bug in building / loading resultTable from cache
                                error('Could not find match for resultTable row in order to do analysis');
                            end
                        end

                        % for saveFigure to look at 
                        da.currentEntry = entry;

                        % open a temporary file to use as a diary to capture all output
                        diary off;
                        diaryFile = tempname(); 
                        diary(diaryFile);

                        % clear the figure info for saveFigure to use
                        da.figureInfoCurrentEntry = [];

                        % try calling the runOnEntry callback
                        if catchErrors
                            try
                                resultStruct = da.runOnEntry(entry, fieldsAnalysis); 
                                exc = [];
                                success = true;
                            catch exc 
                                tcprintf('red', 'EXCEPTION: %s\n', exc.getReport);
                                success = false;
                            end
                        else
                            resultStruct = da.runOnEntry(entry, fieldsAnalysis); 
                            exc = [];
                            success = true;
                        end

                        % warn if not all fields requested were returned
                        % use the requested list fieldsAnalysis, a subset of dt.fieldsAnalysis
                        if success
                            missingFields = setdiff(fieldsAnalysis, fieldnames(resultStruct));
                            if ~isempty(missingFields)
                                debug('WARNING: analysis on this entry did not return fields: %s\n', ...
                                    strjoin(missingFields, ', '));
                            end
                            % warn if the analysis returned extraneous fields as a reminder to add them
                            % to .getFieldsAnalysis. Fields in dt.fieldsAnalysis but not fieldsAnalysis are okay
                            extraFields = setdiff(fieldnames(resultStruct), da.fieldsAnalysis);
                            if ~isempty(missingFields)
                                debug('WARNING: analysis on this entry returned extra fields not listed in .getFieldsAnalysis(): %s\n', ...
                                    strjoin(extraFields, ', '));
                            end
                        end

                        % load the output from the diary file
                        diary('off');
                        output = fileread(diaryFile);

                        if success
                            % Copy only fieldsAnalysis that were returned.
                            % Fields in dt.fieldsAnalysis but not fieldsAnalysis are okay
                            fieldsCopy = intersect(da.fieldsAnalysis, fieldnames(resultStruct));
                            for iField = 1:length(fieldsCopy)
                                field = fieldsCopy{iField};
                                resultTable = resultTable.setFieldValue(iResult, field, resultStruct.(field), 'saveCache', saveCache);
                            end
                        end

                        % set all of the additional field values
                        resultTable = resultTable.setFieldValue(iResult, 'success', success, 'saveCache', saveCache);
                        resultTable = resultTable.setFieldValue(iResult, 'output', output, 'saveCache', saveCache);
                        resultTable = resultTable.setFieldValue(iResult, 'runTimestamp', da.timeRun, 'saveCache', saveCache);
                        resultTable = resultTable.setFieldValue(iResult, 'exception', exc, 'saveCache', saveCache);
                        resultTable = resultTable.setFieldValue(iResult, 'figureInfo', da.figureInfoCurrentEntry, 'saveCache', saveCache);
                    end
                end
            end

            % now fill in all of the info fields of this class with the full table data
            da.successByEntry = resultTable.getValues('success') > 0;                
            da.exceptionByEntry = resultTable.getValues('exception');
            da.figureInfoByEntry = resultTable.getValues('figureInfo');
            da.logByEntry = resultTable.getValues('output');
            da.resultTable = resultTable;

            % mark loaded in database
            da.database.markSourceLoaded(da);

            if ~resultTableChanged && ~forceReport
                % if we haven't run new analysis, no need to build a report
                % so just use the timestamp from the most recent prior run
                dfd = da.resultTable.fieldDescriptorMap('runTimestamp');
                timeRunList = dfd.getAsDateNum(da.resultTable.getValues('runTimestamp'));
                if ~isempty(timeRunList)
                    da.timeRun = max(timeRunList);
                end
            else
                % make sure analysis path exists
                mkdirRecursive(da.pathAnalysis);
                % sym link figures from prior runs to the current analysis folder
                da.linkOldFigures('saveCache', saveCache);
                % save the html report (which will copy resources folder over too)
                da.saveAsHtml();
            end

            if saveCache && resultTableChanged
                % values have been cached as they were generated
                da.resultTable.cache('cacheValues', false);
            end

            da.hasRun = true;
        end

        function saveFigure(da, figh, figName, figCaption)
            % use this to save figures while running the analysis
            if nargin < 4
                figCaption = '';
            end

            entryTable = da.currentEntry;

            assert(entryTable.nEntries == 1);

            exts = da.figureExtensions;
            nExts = length(exts);
            success = false(nExts, 1);
            fileList = cell(nExts, 1);
            %debug('Saving figure %s as %s\n', figName, strjoin(exts, ', '));
            for i = 1:nExts
                ext = exts{i};
                fileName = da.getFigureName(entryTable, figName, ext);
                mkdirRecursive(fileparts(fileName));
                if strcmp(ext, 'svg')
                    try
                        plot2svg(fileName, figh);
                        success(i) = true;
                    catch exc
                        tcprintf('light red', 'WARNING: Error saving to svg\n');
                        tcprintf('light red', exc.getReport());
                    end
                else
                    try
                        exportfig(figh, fileName, 'format', ext, 'resolution', 300);
                        success(i) = true;
                    catch exc
                        tcprintf('light red', 'WARNING: Error saving to %s', ext);
                        tcprintf('light red', exc.getReport());
                        fprintf('\n');
                    end
                end
                fileList{i} = GetFullPath(fileName);
            end

            % log figure infomration
            figInfo.name = figName;
            figInfo.caption = figCaption;
            [figInfo.width figInfo.height] = getFigSize(figh);
            figInfo.extensions = exts;
            figInfo.fileLinkList = fileList;
            figInfo.fileList = fileList;
            figInfo.saveSuccessful = success;
            figInfo = orderfields(figInfo);

            % add to figure info cell
            if isempty(da.figureInfoCurrentEntry)
                da.figureInfoCurrentEntry = figInfo;
            else
                da.figureInfoCurrentEntry(end+1) = figInfo;
            end
        end

        function fileName = getFigureName(da, entryTable, figName, ext)
            % construct figure name that looks like:
            % {{analysisRoot}}/figures/ext/figName.{{keyField descriptors}}.ext
            assert(entryTable.nEntries == 1);
            descriptors = entryTable.getKeyFieldValueDescriptors();

            path = fullfile(da.pathFigures, ext);
            fileName = fullfile(path, sprintf('%s.%s.%s', figName, descriptors{1}, ext));
            fileName = GetFullPath(fileName);
        end

        % symlink all figures loaded from cache that are not saved in the same
        % directory as the most recently generated figures
        function linkOldFigures(da, varargin)
            p = inputParser;
            p.addParamValue('saveCache', true, @islogical);
            p.parse(varargin{:});
            saveCache = p.Results.saveCache;
            da.checkHasRun();

            if ~isunix || ~ismac 
                % TODO add support for windows nt junctions 
                return;
            end

            debug('Creating symbolic links to figures saved in earlier runs\n');
            figurePath = da.pathFigures;
            nEntries = da.resultTable.nEntries;

            for iEntry = 1:nEntries
                entry = da.resultTable(iEntry);
                info = entry.getValue('figureInfo');
                madeChanges = false;

                for iFigure = 1:length(info)
                    figInfo = info(iFigure);
                    for iExt = 1:length(figInfo.extensions)
                        mostRecentLink = figInfo.fileLinkList{iExt};
                        thisRunLocation = da.getFigureName(entry, figInfo.name, figInfo.extensions{iExt}); 

                        if ~strcmp(mostRecentLink, thisRunLocation)
                            % point the symlink at the original file, not at the most recent link
                            % to avoid cascading symlinks
                            actualFile = figInfo.fileList{iExt};
                            success = makeSymLink(actualFile, thisRunLocation);
                            if success
                                % change the figure info link location, not the actual file path
                                info(iFigure).fileLinkList{iExt} = thisRunLocation;
                                madeChanges = true;
                            end
                        end
                    end
                end

                % update the figure info in the result table
                if madeChanges
                    da.resultTable = da.resultTable.setFieldValue(iEntry, 'figureInfo', ...
                        info, 'saveCache', saveCache);
                end
            end

        end

        function viewAsHtml(da)
            da.checkHasRun();
            fileName = da.htmlFile; 
            if ~exist(fileName, 'file')
                html = da.saveAsHtml();
            end
            HTMLWriter.openInBrowser(fileName);
        end
        
        function html = saveAsHtml(da)
            da.checkHasRun();
            fileName = da.htmlFile;
            debug('Saving HTML Report to %s\n', fileName);
            html = HTMLDatabaseAnalysisWriter(fileName);
            html.generate(da);
        end

        function disp(da)
            fprintf('DatabaseAnalysis : %s on %s\n\n', da.getName(), da.getMapsEntryName());
        end
    end

    methods % Cacheable instantiations
        % return the cacheName to be used when instance 
        function name = getCacheName(obj)
            name = obj.getName();
        end

        function timestamp = getCacheValidAfterTimestamp(obj)
            % my data is valid until the last modification timestamp of the 
            if isempty(obj.database)
                % shouldn't happen when running normally, but could if cache functions
                % are called directly
                debug('Warning: Unable to determine whether analysis cache is valid because no .database found');
                % invalidate the cache
                timestamp = Inf;
            else
                % loop through these tables and find the latest modification time
                list = obj.getEntryNamesChangesInvalidateCache();
                
                % ask the database when the latest modification to these tables was
                timestamp = obj.database.getLastUpdated(list);
            end
        end
    end

    methods % Dependent properties
        function path = get.pathAnalysis(da)
            da.checkHasRun();
            if isempty(da.timeRun)
                path = '';
            else
                root = getFirstExisting(MatdbSettingsStore.settings.pathListAnalysis);
                name = da.getName();
                timestr = datestr(da.timeRun, 'yyyy-mm-dd HH.MM.SS');
                folder = sprintf('%s %s', name, timestr);
                path = fullfile(root, name, timestr);
            end
        end

        function path = get.pathFigures(da)
            path = fullfile(da.pathAnalysis, 'figures');
        end

        function fields = get.fieldsAnalysis(da)
            fields = da.getFieldsAnalysis();
        end

        function htmlFile = get.htmlFile(da)
            name = da.getName();
            path = da.pathAnalysis;
            fname = sprintf('%s.html', name);
            htmlFile = fullfile(path,fname); 
        end
    end

    methods % DataSource instantiations 
        % return a string describing this datasource
        function str = describe(da)
            str = da.getName();
        end

        % actually load this into the database, assume all dependencies have been loaded
        function loadInDatabase(da, database)
            da.run(database);
        end

        function deleteCache(da)
            if isempty(da.resultTable);
                r = DatabaseAnalysisResultsTable(da);
            else 
                r = da.resultTable;
            end
            r.deleteCache();
        end
    end
end
